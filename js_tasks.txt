Create a function that returns the sum of the two lowest positive numbers given an array 
of minimum 4 integers. No floats or empty arrays will be passed.

For example, when an array is passed like [19, 5, 42, 2, 77], the output should be 7.

/******************************/

function sumTwoSmallestNumbers(numbers) {  
 var arr = numbers.sort(function(a,b){
			 return a-b;
			});
 var rez=0;
 
 for(var i=0; i<arr.length; i++){
   if(i==0){
    rez += arr[i];
   }
   if(i==1){
    rez += arr[i];
   }
   
}
return rez;

};


/******************************************************/
//треугольник из символов

var i = 0, j = 0;
// Желаемое количество строк
var max = 5;
var space = "",
    star = "";

while (i < max) {
    space = "";
    star = "";
    for (j = 0; j < max - i; j++) space += " ";
    for (j = 0; j < 2 * i + 1; j++) star += "*";
    console.log(space + star);
    i++;
}

var i = 5, j = 0;
// Желаемое количество строк
var min = 0;
var space = "",
    star = "";

while (i > min) {
    space = "";
    star = "";
    for (j = 5; j > i; j--) space += " ";
    for (j = 0; j < 2 * i - 1; j++) star += "*";
    console.log(space + star);
    i--;
}

/******************************************************/
The goal of this exercise is to convert a string to a new string where each character in the new string is '(' if that character appears only once in the original string, or ')' if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate.

Examples:

"din" => "((("

"recede" => "()()()"

"Success" => ")())())"

 var string = "";
  var lowerCaseWord = word.toLowerCase();
  for (var i = 0; i < lowerCaseWord.length; i++) {
    if (lowerCaseWord.indexOf(lowerCaseWord[i]) === lowerCaseWord.lastIndexOf(lowerCaseWord[i])) {
      string += "(";
    } else {
      string += ")";
    }
  }
  return string;
/*********************************************************/
// Given a string of words, you need to find the highest scoring word.

// Each letter of a word scores points according to it's position in the alphabet: a = 1, b = 2, c = 3 etc.

// You need to return the highest scoring word as a string.

// If two words score the same, return the word that appears earliest in the original string.

// All letters will be lowercase and all inputs will be valid.

function high(string){
  words = string.split(" ");
  
  var wordsObj = {};
  for (var i = 0; i < words.length; i++) {
    var word = words[i];
    wordsObj[word] = calcScore(word);
  }
  return Object.keys(wordsObj).sort(function(a, b){
    return wordsObj[b] - wordsObj[a]
  })[0];
}

function calcScore(word) {
  const alphabet= " abcdefghijklmnopqrstuvwxyz";
  chars = word.split("");
  var score = 0;
  chars.forEach(function(char) {
    score += alphabet.indexOf(char);
  });
  return score;
}

high('what time are we climxxxzzzzbing up the vrrolcano')
/***/


function high(x)
{
  var alphabet = "abcdefghijklmnopqrstuvwxyz";
  var wordScores = [];
  var highScore = 0;
  var stringOut = "";
  x = x.toLowerCase();
  var xArray = x.split(" ");
 // console.log (xArray);

  for (var wordLoop = 0; wordLoop < xArray.length; wordLoop ++)
  {
    wordScores[wordLoop]=0;
    for (var lettersLoop = 0; lettersLoop < xArray[wordLoop].length; lettersLoop++)
    {
      console.log (xArray[wordLoop][lettersLoop]);
      if(alphabet.indexOf(xArray[wordLoop][lettersLoop])!==-1)
        wordScores[wordLoop]+= alphabet.indexOf(xArray[wordLoop][lettersLoop])+1;
    }
    console.log (wordScores);
  }
  
  for (var loop = 0; loop < xArray.length; loop ++)
    if (wordScores[loop]>highScore)
    {
      highScore = wordScores[loop];
      stringOut = xArray[loop];
    }
    
  return stringOut;
}
high('what time')
/***************************************************/

Your task is to make function, which returns the sum of a sequence of integers.

The sequence is defined by 3 non-negative values: begin, end, step.

If begin value is greater than the end, function should returns 0

Examples

sequenceSum(2,2,2) === 2
sequenceSum(2,6,2) === 12 // 2 + 4 + 6
sequenceSum(1,5,1) === 15 // 1 + 2 + 3 + 4 + 5
sequenceSum(1,5,3) === 5 // 1 + 4

const sequenceSum = (begin, end, step) => {
var total =0;
  for (var i=begin; i<=end; i+=step){
    total += i;
  }
  return total;
};
